# automatically generated by the FlatBuffers compiler, do not modify

# namespace: wsock

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Value(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Value()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsValue(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # Value
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Value
    def StringValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Value
    def FloatValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Value
    def IntegerValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Value
    def BooleanValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Value
    def ArrayValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ada.comms.wsock.Value import Value

            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Value
    def ArrayValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Value
    def ArrayValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Value
    def ArrayValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Value
    def ArrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Value
    def ArrayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Value
    def ArrayAnyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False


def ValueStart(builder):
    builder.StartObject(9)


def Start(builder):
    ValueStart(builder)


def ValueAddStringValue(builder, stringValue):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stringValue), 0)


def AddStringValue(builder, stringValue):
    ValueAddStringValue(builder, stringValue)


def ValueAddFloatValue(builder, floatValue):
    builder.PrependFloat32Slot(1, floatValue, 0.0)


def AddFloatValue(builder, floatValue):
    ValueAddFloatValue(builder, floatValue)


def ValueAddIntegerValue(builder, integerValue):
    builder.PrependInt32Slot(2, integerValue, 0)


def AddIntegerValue(builder, integerValue):
    ValueAddIntegerValue(builder, integerValue)


def ValueAddBooleanValue(builder, booleanValue):
    builder.PrependBoolSlot(3, booleanValue, 0)


def AddBooleanValue(builder, booleanValue):
    ValueAddBooleanValue(builder, booleanValue)


def ValueAddArrayValue(builder, arrayValue):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(arrayValue), 0)


def AddArrayValue(builder, arrayValue):
    ValueAddArrayValue(builder, arrayValue)


def ValueStartArrayValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartArrayValueVector(builder, numElems):
    return ValueStartArrayValueVector(builder, numElems)


def ValueAddArrayValueType(builder, arrayValueType):
    builder.PrependInt8Slot(5, arrayValueType, 0)


def AddArrayValueType(builder, arrayValueType):
    ValueAddArrayValueType(builder, arrayValueType)


def ValueAddArrayLength(builder, arrayLength):
    builder.PrependInt32Slot(6, arrayLength, 0)


def AddArrayLength(builder, arrayLength):
    ValueAddArrayLength(builder, arrayLength)


def ValueAddArrayType(builder, arrayType):
    builder.PrependInt8Slot(7, arrayType, 0)


def AddArrayType(builder, arrayType):
    ValueAddArrayType(builder, arrayType)


def ValueAddArrayAnyLength(builder, arrayAnyLength):
    builder.PrependBoolSlot(8, arrayAnyLength, 0)


def AddArrayAnyLength(builder, arrayAnyLength):
    ValueAddArrayAnyLength(builder, arrayAnyLength)


def ValueEnd(builder):
    return builder.EndObject()


def End(builder):
    return ValueEnd(builder)
