// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FileObject, FileObjectT } from '../wsock/file-object.js';


export class Server implements flatbuffers.IUnpackableObject<ServerT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Server {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServer(bb:flatbuffers.ByteBuffer, obj?:Server):Server {
  return (obj || new Server()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServer(bb:flatbuffers.ByteBuffer, obj?:Server):Server {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Server()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

addFileObject(obj?:FileObject):FileObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new FileObject()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

allFileObjects(index: number, obj?:FileObject):FileObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FileObject()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

allFileObjectsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startServer(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAddFileObject(builder:flatbuffers.Builder, addFileObjectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, addFileObjectOffset, 0);
}

static addAllFileObjects(builder:flatbuffers.Builder, allFileObjectsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, allFileObjectsOffset, 0);
}

static createAllFileObjectsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAllFileObjectsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endServer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createServer(builder:flatbuffers.Builder, addFileObjectOffset:flatbuffers.Offset, allFileObjectsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Server.startServer(builder);
  Server.addAddFileObject(builder, addFileObjectOffset);
  Server.addAllFileObjects(builder, allFileObjectsOffset);
  return Server.endServer(builder);
}

unpack(): ServerT {
  return new ServerT(
    (this.addFileObject() !== null ? this.addFileObject()!.unpack() : null),
    this.bb!.createObjList<FileObject, FileObjectT>(this.allFileObjects.bind(this), this.allFileObjectsLength())
  );
}


unpackTo(_o: ServerT): void {
  _o.addFileObject = (this.addFileObject() !== null ? this.addFileObject()!.unpack() : null);
  _o.allFileObjects = this.bb!.createObjList<FileObject, FileObjectT>(this.allFileObjects.bind(this), this.allFileObjectsLength());
}
}

export class ServerT implements flatbuffers.IGeneratedObject {
constructor(
  public addFileObject: FileObjectT|null = null,
  public allFileObjects: (FileObjectT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const addFileObject = (this.addFileObject !== null ? this.addFileObject!.pack(builder) : 0);
  const allFileObjects = Server.createAllFileObjectsVector(builder, builder.createObjectOffsetList(this.allFileObjects));

  return Server.createServer(builder,
    addFileObject,
    allFileObjects
  );
}
}
