// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Screenshot implements flatbuffers.IUnpackableObject<ScreenshotT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Screenshot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScreenshot(bb:flatbuffers.ByteBuffer, obj?:Screenshot):Screenshot {
  return (obj || new Screenshot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScreenshot(bb:flatbuffers.ByteBuffer, obj?:Screenshot):Screenshot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Screenshot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pngFilePath():string|null
pngFilePath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pngFilePath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startScreenshot(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPngFilePath(builder:flatbuffers.Builder, pngFilePathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pngFilePathOffset, 0);
}

static endScreenshot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createScreenshot(builder:flatbuffers.Builder, pngFilePathOffset:flatbuffers.Offset):flatbuffers.Offset {
  Screenshot.startScreenshot(builder);
  Screenshot.addPngFilePath(builder, pngFilePathOffset);
  return Screenshot.endScreenshot(builder);
}

unpack(): ScreenshotT {
  return new ScreenshotT(
    this.pngFilePath()
  );
}


unpackTo(_o: ScreenshotT): void {
  _o.pngFilePath = this.pngFilePath();
}
}

export class ScreenshotT implements flatbuffers.IGeneratedObject {
constructor(
  public pngFilePath: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pngFilePath = (this.pngFilePath !== null ? builder.createString(this.pngFilePath!) : 0);

  return Screenshot.createScreenshot(builder,
    pngFilePath
  );
}
}
