namespace base;

// Define a ParameterType enum to categorize types
enum ParameterType : byte {
    UNKNOWN = 0,
    STRING = 1,
    FLOAT = 2,
    INTEGER = 3,
    BOOLEAN = 4,
    ARRAY = 6,
}

enum ArrayType : byte {
    TUPLE = 0,
    LIST = 1,
    SET = 2,
}

// Define a Value table for handling different data types
table Value {
    string_value: string;   // Value when type is STRING
    float_value: float;  // Value when type is NUMBER
    integer_value: int;  // Value when type is NUMBER
    boolean_value: bool;    // Value when type is BOOLEAN
    array_value: [Value];     // Array of values
    array_value_type: ParameterType; // Array of numbers (e.g., [1.0, 2.0, 3.0])
    array_length: int;      // Length of the array,
    array_type: ArrayType; // Type of the array
    array_any_length: bool; // Boolean to indicate if the array can have any length
}

// Define a Parameter table that uses a union type for value
table Parameter {
    name: string;               // The name of the parameter
    type: ParameterType;        // The type of the parameter (enum defined above)
    value: Value;               // Union value representing different data types
    default_value: Value;       // Default value of the parameter
    options: [Value];           // List of options for the parameter
}


table Error {
  code: int;
  message: string;
}

enum FilePurpose : byte {
  DESIGN = 0,
  ANALYSIS = 1,
  FABRICATE = 2
}

enum FileType : byte {
    IFC = 0,
    GLB = 1,
    SQLITE = 2,
    XLSX = 3,
    CSV = 4,
}

table ProcedureStart {
    procedure_name: string;
    procedure_id_string: string;
    parameters: [Parameter];
}
table FileObject {
  name: string;             // Name of the file object (must be unique) "MyStructure-1"
  file_type: FileType;      // design, analysis, fabricate
  purpose: FilePurpose;     // Purpose of the file
  filepath: string;         // Path to the file
  filedata: [ubyte];        // Binary data (e.g., IFC, GLB, SQLite)
  glb_file: FileObject;     // GLB file object converted from original file
  ifcsqlite_file: FileObject;     // IF, the file object is IFC, this is a Boolean to indicate if the ifc file has a corresponding sqlite file
  // procedure related configs
  is_procedure_output: bool; // Boolean to indicate if the file object is the output of a procedure
  procedure_parent: ProcedureStart; // Name of the procedure that generated the file object
  compressed: bool = false; // Boolean to indicate if the file object (filedata) is compressed
}

table FileObjectRef {
    name: string ;
    file_type: FileType;
    purpose: FilePurpose;
    filepath: string;
    glb_file: FileObjectRef;
    ifcsqlite_file: FileObjectRef;
    is_procedure_output: bool;
    procedure_parent: ProcedureStart;
}

table FileArg {
    arg_name: string;
    file_type: FileType;
}
