[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ada-py"
version = "0.3.8"
authors = [
    { name = "Kristoffer H. Andersen", email = "kristoffer_andersen@outlook.com" },
]
description = "Assembly for Design & Analysis - A python library for structural analysis and design"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Utilities",
]
[project.scripts]
ada-viewer = "ada.comms.wsock_cli:ws_cli_app"

[project.urls]
"Homepage" = "https://github.com/Krande/adapy"
"Bug Tracker" = "https://github.com/Krande/adapy/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["ada*"]
exclude = ["frontend*", "flatbuffers*"]

[tool.setuptools.package-data]
ada = [
    "sections/resources/ProfileDB.json",
    "materials/metals/resources/NLMatParams.json",
    "cadit/gxml/write/resources/xml_blank.xml",
    "fem/results/resources/results.sql",
    "visit/rendering/resources/index.zip"
]


[tool.black]
line-length = 120

[tool.ruff]
line-length = 120
exclude = ["examples/", ".pixi/", "temp/"]

[tool.ruff.lint]
ignore = ["E741"]

[tool.isort]
profile = "black"
skip = [".pixi", "node_modules", "temp"]
skip_glob = ["**/node_modules/**", "**/temp/**"]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "session"
testpaths = ["tests"]
pythonpath = ["src"]

[tool.pixi.project]
channels = ["https://repo.prefix.dev/code-aster", "conda-forge"]
platforms = ["win-64", "linux-64", "osx-64"]

[tool.pixi.environments]
prod = { features = ["prod"], solve-group = "prod", no-default-feature = true }
lint = { features = ["lint"], no-default-feature = true }
tests = { features = ["tests", "prod"], solve-group = "prod", no-default-feature = true }
profile = { features = ["profile", "prod"], solve-group = "prod", no-default-feature = true }
docs = { features = ["docs", "prod"], solve-group = "prod", no-default-feature = true }
frontend = { features = ["web"], no-default-feature = true }

[tool.pixi.feature.prod.dependencies]
python = "3.12.*"
bcf-client = "*"
kaleido-core = "==0.1.0"
numpy = "*"
hdf5 = "*"
h5py = "*"
ifcopenshell = "*"
pythonocc-core = "*"
python-gmsh = "*"
pyquaternion = "*"
trimesh = "*"
occt = "==7.8.1"
send2trash = "*"
meshio = "*"
websockets = ">=14"
plotly = "*"
python-kaleido = "*"
calculix = "*"
ipywidgets = "*"
jupyterlab = "*"
pyparsing = "*"
pyglfw = "*"
pygfx = "*"
flatbuffers = "*"
python-flatbuffers = "*"
lark = "*"

[tool.pixi.feature.prod.target.linux-64.dependencies]
# These are not available on conda-forge
code-aster = "*"

[tool.pixi.feature.prod.target.win-64.dependencies]
code-aster = { version = "*", channel = "https://repo.prefix.dev/code-aster" }

[tool.pixi.feature.tests.dependencies]
pytest = "*"
pytest-benchmark = "*"
pytest-asyncio = "*"
paradoc = "*"
python-dotenv = "*"
watchdog = "*"

[tool.pixi.feature.profile.dependencies]
pytest = "*"
pytest-benchmark = "*"
pytest-asyncio = "*"
scalene = "*"

# Editable installs
[tool.pixi.feature.tests.pypi-dependencies]
pytest-playwright = "*"

[tool.pixi.feature.lint.dependencies]
black = "==24.4.2"
isort = "==5.13.2"
ruff = "==0.4.10"
flatbuffers = "*"
python-flatbuffers = "*"

[tool.pixi.feature.docs.dependencies]
sphinx = "*"
furo = "*"
myst-parser = "*"
scipy = "*"

[tool.pixi.feature.web.dependencies]
nodejs = "*"
flatbuffers = "*"

[tool.pixi.feature.lint.tasks]
lint = "isort . && black . --config pyproject.toml && ruff check . --fix"
flat = { cmd = "python src/flatbuffers/update_flatbuffers.py", cwd = "./" }

[tool.pixi.feature.docs.tasks]
docs = { cmd = "cd docs && make html", env = { "PYTHONPATH" = "$PIXI_PROJECT_ROOT/src" } }

[tool.pixi.feature.tests.tasks]
test = "pytest tests --ignore=tests/profiling --ignore=tests/fem --durations=0"
test-core = "pytest tests --ignore=tests/profiling --ignore=tests/fem --ignore=tests/full --durations=0"
test-all = "pytest tests --durations=0"
test-fem = { cmd = "pytest tests --ignore=tests/profiling --ignore=tests/core --ignore=tests/full --durations=0" }

fem-doc = { cmd = "python build_verification_report.py true true --export-format=docx", cwd = "./tests/fem", env = { "PYTHONPATH" = "$PIXI_PROJECT_ROOT/src" } }
fem-doc-dev = { cmd = "python doc_live_html.py", cwd = "./tests/fem" }

[tool.pixi.feature.web.tasks]
npm = { cmd = "npm", cwd = "./src/frontend" }
wdev = { cmd = "npm run dev", cwd = "./src/frontend" }
wbuild = { cmd = "npm run build", cwd = "./src/frontend" }
fdepcheck = { cmd = "depcheck", cwd = "./src/frontend" }

[tool.pixi.feature.profile.tasks]
scalene = { cmd = "scalene --json -m pytest ./tests/profiling --outfile=profile.json", env = { "PYTHONPATH" = "$PIXI_PROJECT_ROOT/src" } }
cprofile = { cmd = "python -m cProfile -o profile.prof -m pytest ./tests/profiling", env = { "PYTHONPATH" = "$PIXI_PROJECT_ROOT/src" } }

[tool.pixi.dependencies]
pixi-pycharm = ">=0.0.7,<0.0.8"


