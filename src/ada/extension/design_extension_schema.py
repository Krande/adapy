# generated by datamodel-codegen:
#   filename:  design_extension.schema.json
#   timestamp: 2025-06-24T10:19:21+00:00

from __future__ import annotations

from typing import Dict, List, Optional, Union

from pydantic import BaseModel, Field, conint, constr


class Groups(BaseModel):
    name: str = Field(..., description="Display name of the group")
    members: List[Union[str, conint(ge=0)]] = Field(
        ..., description="Array of member identifiers (could be node indices, names, or other identifiers)"
    )
    description: Optional[str] = Field(None, description="Optional description of the group")


class DesignNodeReference(BaseModel):
    faces: Optional[str] = Field(None, description="node reference of Faces mesh")


class DesignDataExtension(BaseModel):
    name: str = Field(..., description="Name of the design object")
    description: Optional[str] = Field(None, description="Optional description of the design object")
    groups: Optional[Dict[constr(pattern=r"^.+$"), Groups]] = Field(
        None, description="Named groups and their member objects"
    )
    node_references: Optional[DesignNodeReference] = Field(None, description="References to GLTF node names")
