// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FilePurpose } from '../wsock/file-purpose.js';
import { FileType } from '../wsock/file-type.js';


export class FileObject {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FileObject {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFileObject(bb:flatbuffers.ByteBuffer, obj?:FileObject):FileObject {
  return (obj || new FileObject()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFileObject(bb:flatbuffers.ByteBuffer, obj?:FileObject):FileObject {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FileObject()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fileType():FileType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : FileType.IFC;
}

purpose():FilePurpose {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : FilePurpose.DESIGN;
}

filepath():string|null
filepath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
filepath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startFileObject(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFileType(builder:flatbuffers.Builder, fileType:FileType) {
  builder.addFieldInt8(0, fileType, FileType.IFC);
}

static addPurpose(builder:flatbuffers.Builder, purpose:FilePurpose) {
  builder.addFieldInt8(1, purpose, FilePurpose.DESIGN);
}

static addFilepath(builder:flatbuffers.Builder, filepathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, filepathOffset, 0);
}

static endFileObject(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFileObject(builder:flatbuffers.Builder, fileType:FileType, purpose:FilePurpose, filepathOffset:flatbuffers.Offset):flatbuffers.Offset {
  FileObject.startFileObject(builder);
  FileObject.addFileType(builder, fileType);
  FileObject.addPurpose(builder, purpose);
  FileObject.addFilepath(builder, filepathOffset);
  return FileObject.endFileObject(builder);
}
}
