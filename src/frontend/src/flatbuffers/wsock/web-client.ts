// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class WebClient implements flatbuffers.IUnpackableObject<WebClientT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WebClient {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWebClient(bb:flatbuffers.ByteBuffer, obj?:WebClient):WebClient {
  return (obj || new WebClient()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWebClient(bb:flatbuffers.ByteBuffer, obj?:WebClient):WebClient {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WebClient()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

instanceId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

address():string|null
address(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
address(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

port():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startWebClient(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addInstanceId(builder:flatbuffers.Builder, instanceId:number) {
  builder.addFieldInt32(0, instanceId, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addAddress(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, addressOffset, 0);
}

static addPort(builder:flatbuffers.Builder, port:number) {
  builder.addFieldInt32(3, port, 0);
}

static endWebClient(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWebClient(builder:flatbuffers.Builder, instanceId:number, nameOffset:flatbuffers.Offset, addressOffset:flatbuffers.Offset, port:number):flatbuffers.Offset {
  WebClient.startWebClient(builder);
  WebClient.addInstanceId(builder, instanceId);
  WebClient.addName(builder, nameOffset);
  WebClient.addAddress(builder, addressOffset);
  WebClient.addPort(builder, port);
  return WebClient.endWebClient(builder);
}

unpack(): WebClientT {
  return new WebClientT(
    this.instanceId(),
    this.name(),
    this.address(),
    this.port()
  );
}


unpackTo(_o: WebClientT): void {
  _o.instanceId = this.instanceId();
  _o.name = this.name();
  _o.address = this.address();
  _o.port = this.port();
}
}

export class WebClientT implements flatbuffers.IGeneratedObject {
constructor(
  public instanceId: number = 0,
  public name: string|Uint8Array|null = null,
  public address: string|Uint8Array|null = null,
  public port: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const address = (this.address !== null ? builder.createString(this.address!) : 0);

  return WebClient.createWebClient(builder,
    this.instanceId,
    name,
    address,
    this.port
  );
}
}
