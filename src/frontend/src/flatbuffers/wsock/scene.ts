// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CameraParams, CameraParamsT } from '../wsock/camera-params.js';
import { FileObject, FileObjectT } from '../wsock/file-object.js';
import { SceneOperations } from './scene-operations';


export class Scene implements flatbuffers.IUnpackableObject<SceneT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Scene {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScene(bb:flatbuffers.ByteBuffer, obj?:Scene):Scene {
  return (obj || new Scene()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScene(bb:flatbuffers.ByteBuffer, obj?:Scene):Scene {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Scene()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

operation():SceneOperations {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SceneOperations.ADD;
}

cameraParams(obj?:CameraParams):CameraParams|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new CameraParams()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

currentFile(obj?:FileObject):FileObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FileObject()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startScene(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addOperation(builder:flatbuffers.Builder, operation:SceneOperations) {
  builder.addFieldInt8(0, operation, SceneOperations.ADD);
}

static addCameraParams(builder:flatbuffers.Builder, cameraParamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, cameraParamsOffset, 0);
}

static addCurrentFile(builder:flatbuffers.Builder, currentFileOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, currentFileOffset, 0);
}

static endScene(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): SceneT {
  return new SceneT(
    this.operation(),
    (this.cameraParams() !== null ? this.cameraParams()!.unpack() : null),
    (this.currentFile() !== null ? this.currentFile()!.unpack() : null)
  );
}


unpackTo(_o: SceneT): void {
  _o.operation = this.operation();
  _o.cameraParams = (this.cameraParams() !== null ? this.cameraParams()!.unpack() : null);
  _o.currentFile = (this.currentFile() !== null ? this.currentFile()!.unpack() : null);
}
}

export class SceneT implements flatbuffers.IGeneratedObject {
constructor(
  public operation: SceneOperations = SceneOperations.ADD,
  public cameraParams: CameraParamsT|null = null,
  public currentFile: FileObjectT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cameraParams = (this.cameraParams !== null ? this.cameraParams!.pack(builder) : 0);
  const currentFile = (this.currentFile !== null ? this.currentFile!.pack(builder) : 0);

  Scene.startScene(builder);
  Scene.addOperation(builder, this.operation);
  Scene.addCameraParams(builder, cameraParams);
  Scene.addCurrentFile(builder, currentFile);

  return Scene.endScene(builder);
}
}
