// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ParameterType } from './parameter-type';
import { Value, ValueT } from '../wsock/value.js';


export class Parameter implements flatbuffers.IUnpackableObject<ParameterT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Parameter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsParameter(bb:flatbuffers.ByteBuffer, obj?:Parameter):Parameter {
  return (obj || new Parameter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsParameter(bb:flatbuffers.ByteBuffer, obj?:Parameter):Parameter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Parameter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():ParameterType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ParameterType.UNKNOWN;
}

value(obj?:Value):Value|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Value()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

defaultValue(obj?:Value):Value|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Value()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

options(index: number, obj?:Value):Value|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Value()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

optionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startParameter(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:ParameterType) {
  builder.addFieldInt8(1, type, ParameterType.UNKNOWN);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valueOffset, 0);
}

static addDefaultValue(builder:flatbuffers.Builder, defaultValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, defaultValueOffset, 0);
}

static addOptions(builder:flatbuffers.Builder, optionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, optionsOffset, 0);
}

static createOptionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOptionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endParameter(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): ParameterT {
  return new ParameterT(
    this.name(),
    this.type(),
    (this.value() !== null ? this.value()!.unpack() : null),
    (this.defaultValue() !== null ? this.defaultValue()!.unpack() : null),
    this.bb!.createObjList<Value, ValueT>(this.options.bind(this), this.optionsLength())
  );
}


unpackTo(_o: ParameterT): void {
  _o.name = this.name();
  _o.type = this.type();
  _o.value = (this.value() !== null ? this.value()!.unpack() : null);
  _o.defaultValue = (this.defaultValue() !== null ? this.defaultValue()!.unpack() : null);
  _o.options = this.bb!.createObjList<Value, ValueT>(this.options.bind(this), this.optionsLength());
}
}

export class ParameterT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public type: ParameterType = ParameterType.UNKNOWN,
  public value: ValueT|null = null,
  public defaultValue: ValueT|null = null,
  public options: (ValueT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const value = (this.value !== null ? this.value!.pack(builder) : 0);
  const defaultValue = (this.defaultValue !== null ? this.defaultValue!.pack(builder) : 0);
  const options = Parameter.createOptionsVector(builder, builder.createObjectOffsetList(this.options));

  Parameter.startParameter(builder);
  Parameter.addName(builder, name);
  Parameter.addType(builder, this.type);
  Parameter.addValue(builder, value);
  Parameter.addDefaultValue(builder, defaultValue);
  Parameter.addOptions(builder, options);

  return Parameter.endParameter(builder);
}
}
