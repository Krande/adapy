// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ArrayType } from './array-type';
import { ParameterType } from './parameter-type';


export class Value implements flatbuffers.IUnpackableObject<ValueT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Value {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsValue(bb:flatbuffers.ByteBuffer, obj?:Value):Value {
  return (obj || new Value()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsValue(bb:flatbuffers.ByteBuffer, obj?:Value):Value {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Value()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stringValue():string|null
stringValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stringValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

floatValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

integerValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

booleanValue():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

arrayValue(index: number, obj?:Value):Value|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Value()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

arrayValueLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

arrayValueType():ParameterType {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ParameterType.UNKNOWN;
}

arrayLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

arrayType():ArrayType {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ArrayType.TUPLE;
}

arrayAnyLength():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startValue(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addStringValue(builder:flatbuffers.Builder, stringValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stringValueOffset, 0);
}

static addFloatValue(builder:flatbuffers.Builder, floatValue:number) {
  builder.addFieldFloat32(1, floatValue, 0.0);
}

static addIntegerValue(builder:flatbuffers.Builder, integerValue:number) {
  builder.addFieldInt32(2, integerValue, 0);
}

static addBooleanValue(builder:flatbuffers.Builder, booleanValue:boolean) {
  builder.addFieldInt8(3, +booleanValue, +false);
}

static addArrayValue(builder:flatbuffers.Builder, arrayValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, arrayValueOffset, 0);
}

static createArrayValueVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startArrayValueVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addArrayValueType(builder:flatbuffers.Builder, arrayValueType:ParameterType) {
  builder.addFieldInt8(5, arrayValueType, ParameterType.UNKNOWN);
}

static addArrayLength(builder:flatbuffers.Builder, arrayLength:number) {
  builder.addFieldInt32(6, arrayLength, 0);
}

static addArrayType(builder:flatbuffers.Builder, arrayType:ArrayType) {
  builder.addFieldInt8(7, arrayType, ArrayType.TUPLE);
}

static addArrayAnyLength(builder:flatbuffers.Builder, arrayAnyLength:boolean) {
  builder.addFieldInt8(8, +arrayAnyLength, +false);
}

static endValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createValue(builder:flatbuffers.Builder, stringValueOffset:flatbuffers.Offset, floatValue:number, integerValue:number, booleanValue:boolean, arrayValueOffset:flatbuffers.Offset, arrayValueType:ParameterType, arrayLength:number, arrayType:ArrayType, arrayAnyLength:boolean):flatbuffers.Offset {
  Value.startValue(builder);
  Value.addStringValue(builder, stringValueOffset);
  Value.addFloatValue(builder, floatValue);
  Value.addIntegerValue(builder, integerValue);
  Value.addBooleanValue(builder, booleanValue);
  Value.addArrayValue(builder, arrayValueOffset);
  Value.addArrayValueType(builder, arrayValueType);
  Value.addArrayLength(builder, arrayLength);
  Value.addArrayType(builder, arrayType);
  Value.addArrayAnyLength(builder, arrayAnyLength);
  return Value.endValue(builder);
}

unpack(): ValueT {
  return new ValueT(
    this.stringValue(),
    this.floatValue(),
    this.integerValue(),
    this.booleanValue(),
    this.bb!.createObjList<Value, ValueT>(this.arrayValue.bind(this), this.arrayValueLength()),
    this.arrayValueType(),
    this.arrayLength(),
    this.arrayType(),
    this.arrayAnyLength()
  );
}


unpackTo(_o: ValueT): void {
  _o.stringValue = this.stringValue();
  _o.floatValue = this.floatValue();
  _o.integerValue = this.integerValue();
  _o.booleanValue = this.booleanValue();
  _o.arrayValue = this.bb!.createObjList<Value, ValueT>(this.arrayValue.bind(this), this.arrayValueLength());
  _o.arrayValueType = this.arrayValueType();
  _o.arrayLength = this.arrayLength();
  _o.arrayType = this.arrayType();
  _o.arrayAnyLength = this.arrayAnyLength();
}
}

export class ValueT implements flatbuffers.IGeneratedObject {
constructor(
  public stringValue: string|Uint8Array|null = null,
  public floatValue: number = 0.0,
  public integerValue: number = 0,
  public booleanValue: boolean = false,
  public arrayValue: (ValueT)[] = [],
  public arrayValueType: ParameterType = ParameterType.UNKNOWN,
  public arrayLength: number = 0,
  public arrayType: ArrayType = ArrayType.TUPLE,
  public arrayAnyLength: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const stringValue = (this.stringValue !== null ? builder.createString(this.stringValue!) : 0);
  const arrayValue = Value.createArrayValueVector(builder, builder.createObjectOffsetList(this.arrayValue));

  return Value.createValue(builder,
    stringValue,
    this.floatValue,
    this.integerValue,
    this.booleanValue,
    arrayValue,
    this.arrayValueType,
    this.arrayLength,
    this.arrayType,
    this.arrayAnyLength
  );
}
}
