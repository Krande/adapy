# automatically generated by the FlatBuffers compiler, do not modify

# namespace: wsock

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Parameter(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Parameter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParameter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # Parameter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Parameter
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Parameter
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Parameter
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from ada.comms.wsock.Value import Value

            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Parameter
    def DefaultValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from ada.comms.wsock.Value import Value

            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Parameter
    def Options(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ada.comms.wsock.Value import Value

            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Parameter
    def OptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameter
    def OptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0


def ParameterStart(builder):
    builder.StartObject(5)


def Start(builder):
    ParameterStart(builder)


def ParameterAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)


def AddName(builder, name):
    ParameterAddName(builder, name)


def ParameterAddType(builder, type):
    builder.PrependInt8Slot(1, type, 0)


def AddType(builder, type):
    ParameterAddType(builder, type)


def ParameterAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)


def AddValue(builder, value):
    ParameterAddValue(builder, value)


def ParameterAddDefaultValue(builder, defaultValue):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(defaultValue), 0)


def AddDefaultValue(builder, defaultValue):
    ParameterAddDefaultValue(builder, defaultValue)


def ParameterAddOptions(builder, options):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)


def AddOptions(builder, options):
    ParameterAddOptions(builder, options)


def ParameterStartOptionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartOptionsVector(builder, numElems):
    return ParameterStartOptionsVector(builder, numElems)


def ParameterEnd(builder):
    return builder.EndObject()


def End(builder):
    return ParameterEnd(builder)
