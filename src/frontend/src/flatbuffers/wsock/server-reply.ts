// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CommandType } from './command-type';
import { Error, ErrorT } from '../wsock/error.js';
import { FileObject, FileObjectT } from '../wsock/file-object.js';


export class ServerReply implements flatbuffers.IUnpackableObject<ServerReplyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ServerReply {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServerReply(bb:flatbuffers.ByteBuffer, obj?:ServerReply):ServerReply {
  return (obj || new ServerReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServerReply(bb:flatbuffers.ByteBuffer, obj?:ServerReply):ServerReply {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServerReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fileObjects(index: number, obj?:FileObject):FileObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FileObject()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fileObjectsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

replyTo():CommandType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CommandType.PING;
}

error(obj?:Error):Error|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Error()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startServerReply(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, messageOffset, 0);
}

static addFileObjects(builder:flatbuffers.Builder, fileObjectsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, fileObjectsOffset, 0);
}

static createFileObjectsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFileObjectsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReplyTo(builder:flatbuffers.Builder, replyTo:CommandType) {
  builder.addFieldInt8(2, replyTo, CommandType.PING);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, errorOffset, 0);
}

static endServerReply(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): ServerReplyT {
  return new ServerReplyT(
    this.message(),
    this.bb!.createObjList<FileObject, FileObjectT>(this.fileObjects.bind(this), this.fileObjectsLength()),
    this.replyTo(),
    (this.error() !== null ? this.error()!.unpack() : null)
  );
}


unpackTo(_o: ServerReplyT): void {
  _o.message = this.message();
  _o.fileObjects = this.bb!.createObjList<FileObject, FileObjectT>(this.fileObjects.bind(this), this.fileObjectsLength());
  _o.replyTo = this.replyTo();
  _o.error = (this.error() !== null ? this.error()!.unpack() : null);
}
}

export class ServerReplyT implements flatbuffers.IGeneratedObject {
constructor(
  public message: string|Uint8Array|null = null,
  public fileObjects: (FileObjectT)[] = [],
  public replyTo: CommandType = CommandType.PING,
  public error: ErrorT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const message = (this.message !== null ? builder.createString(this.message!) : 0);
  const fileObjects = ServerReply.createFileObjectsVector(builder, builder.createObjectOffsetList(this.fileObjects));
  const error = (this.error !== null ? this.error!.pack(builder) : 0);

  ServerReply.startServerReply(builder);
  ServerReply.addMessage(builder, message);
  ServerReply.addFileObjects(builder, fileObjects);
  ServerReply.addReplyTo(builder, this.replyTo);
  ServerReply.addError(builder, error);

  return ServerReply.endServerReply(builder);
}
}
