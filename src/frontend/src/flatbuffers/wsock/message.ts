// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AppendMesh, AppendMeshT } from '../meshes/append-mesh.js';
import { CommandType } from './command-type';
import { MeshInfo, MeshInfoT } from '../wsock/mesh-info.js';
import { ProcedureStore, ProcedureStoreT } from '../wsock/procedure-store.js';
import { Scene, SceneT } from '../wsock/scene.js';
import { Screenshot, ScreenshotT } from '../wsock/screenshot.js';
import { Server, ServerT } from '../wsock/server.js';
import { ServerReply, ServerReplyT } from '../wsock/server-reply.js';
import { TargetType } from './target-type';
import { WebClient, WebClientT } from '../wsock/web-client.js';


export class Message implements flatbuffers.IUnpackableObject<MessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Message {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

instanceId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

commandType():CommandType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CommandType.PING;
}

scene(obj?:Scene):Scene|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Scene()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

server(obj?:Server):Server|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Server()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

meshInfo(obj?:MeshInfo):MeshInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new MeshInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

targetGroup():TargetType {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TargetType.WEB;
}

clientType():TargetType {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TargetType.WEB;
}

targetId():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

webClients(index: number, obj?:WebClient):WebClient|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new WebClient()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

webClientsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

procedureStore(obj?:ProcedureStore):ProcedureStore|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new ProcedureStore()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

serverReply(obj?:ServerReply):ServerReply|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new ServerReply()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

screenshot(obj?:Screenshot):Screenshot|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new Screenshot()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

package_(obj?:AppendMesh):AppendMesh|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new AppendMesh()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startMessage(builder:flatbuffers.Builder) {
  builder.startObject(13);
}

static addInstanceId(builder:flatbuffers.Builder, instanceId:number) {
  builder.addFieldInt32(0, instanceId, 0);
}

static addCommandType(builder:flatbuffers.Builder, commandType:CommandType) {
  builder.addFieldInt8(1, commandType, CommandType.PING);
}

static addScene(builder:flatbuffers.Builder, sceneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sceneOffset, 0);
}

static addServer(builder:flatbuffers.Builder, serverOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, serverOffset, 0);
}

static addMeshInfo(builder:flatbuffers.Builder, meshInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, meshInfoOffset, 0);
}

static addTargetGroup(builder:flatbuffers.Builder, targetGroup:TargetType) {
  builder.addFieldInt8(5, targetGroup, TargetType.WEB);
}

static addClientType(builder:flatbuffers.Builder, clientType:TargetType) {
  builder.addFieldInt8(6, clientType, TargetType.WEB);
}

static addTargetId(builder:flatbuffers.Builder, targetId:number) {
  builder.addFieldInt32(7, targetId, 0);
}

static addWebClients(builder:flatbuffers.Builder, webClientsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, webClientsOffset, 0);
}

static createWebClientsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWebClientsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addProcedureStore(builder:flatbuffers.Builder, procedureStoreOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, procedureStoreOffset, 0);
}

static addServerReply(builder:flatbuffers.Builder, serverReplyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, serverReplyOffset, 0);
}

static addScreenshot(builder:flatbuffers.Builder, screenshotOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, screenshotOffset, 0);
}

static addPackage(builder:flatbuffers.Builder, package_Offset:flatbuffers.Offset) {
  builder.addFieldOffset(12, package_Offset, 0);
}

static endMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): MessageT {
  return new MessageT(
    this.instanceId(),
    this.commandType(),
    (this.scene() !== null ? this.scene()!.unpack() : null),
    (this.server() !== null ? this.server()!.unpack() : null),
    (this.meshInfo() !== null ? this.meshInfo()!.unpack() : null),
    this.targetGroup(),
    this.clientType(),
    this.targetId(),
    this.bb!.createObjList<WebClient, WebClientT>(this.webClients.bind(this), this.webClientsLength()),
    (this.procedureStore() !== null ? this.procedureStore()!.unpack() : null),
    (this.serverReply() !== null ? this.serverReply()!.unpack() : null),
    (this.screenshot() !== null ? this.screenshot()!.unpack() : null),
    (this.package_() !== null ? this.package_()!.unpack() : null)
  );
}


unpackTo(_o: MessageT): void {
  _o.instanceId = this.instanceId();
  _o.commandType = this.commandType();
  _o.scene = (this.scene() !== null ? this.scene()!.unpack() : null);
  _o.server = (this.server() !== null ? this.server()!.unpack() : null);
  _o.meshInfo = (this.meshInfo() !== null ? this.meshInfo()!.unpack() : null);
  _o.targetGroup = this.targetGroup();
  _o.clientType = this.clientType();
  _o.targetId = this.targetId();
  _o.webClients = this.bb!.createObjList<WebClient, WebClientT>(this.webClients.bind(this), this.webClientsLength());
  _o.procedureStore = (this.procedureStore() !== null ? this.procedureStore()!.unpack() : null);
  _o.serverReply = (this.serverReply() !== null ? this.serverReply()!.unpack() : null);
  _o.screenshot = (this.screenshot() !== null ? this.screenshot()!.unpack() : null);
  _o.package_ = (this.package_() !== null ? this.package_()!.unpack() : null);
}
}

export class MessageT implements flatbuffers.IGeneratedObject {
constructor(
  public instanceId: number = 0,
  public commandType: CommandType = CommandType.PING,
  public scene: SceneT|null = null,
  public server: ServerT|null = null,
  public meshInfo: MeshInfoT|null = null,
  public targetGroup: TargetType = TargetType.WEB,
  public clientType: TargetType = TargetType.WEB,
  public targetId: number = 0,
  public webClients: (WebClientT)[] = [],
  public procedureStore: ProcedureStoreT|null = null,
  public serverReply: ServerReplyT|null = null,
  public screenshot: ScreenshotT|null = null,
  public package_: AppendMeshT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const scene = (this.scene !== null ? this.scene!.pack(builder) : 0);
  const server = (this.server !== null ? this.server!.pack(builder) : 0);
  const meshInfo = (this.meshInfo !== null ? this.meshInfo!.pack(builder) : 0);
  const webClients = Message.createWebClientsVector(builder, builder.createObjectOffsetList(this.webClients));
  const procedureStore = (this.procedureStore !== null ? this.procedureStore!.pack(builder) : 0);
  const serverReply = (this.serverReply !== null ? this.serverReply!.pack(builder) : 0);
  const screenshot = (this.screenshot !== null ? this.screenshot!.pack(builder) : 0);
  const package_ = (this.package_ !== null ? this.package_!.pack(builder) : 0);

  Message.startMessage(builder);
  Message.addInstanceId(builder, this.instanceId);
  Message.addCommandType(builder, this.commandType);
  Message.addScene(builder, scene);
  Message.addServer(builder, server);
  Message.addMeshInfo(builder, meshInfo);
  Message.addTargetGroup(builder, this.targetGroup);
  Message.addClientType(builder, this.clientType);
  Message.addTargetId(builder, this.targetId);
  Message.addWebClients(builder, webClients);
  Message.addProcedureStore(builder, procedureStore);
  Message.addServerReply(builder, serverReply);
  Message.addScreenshot(builder, screenshot);
  Message.addPackage(builder, package_);

  return Message.endMessage(builder);
}
}
