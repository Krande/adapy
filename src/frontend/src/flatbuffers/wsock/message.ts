// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BinaryData, BinaryDataT } from '../wsock/binary-data.js';
import { CommandType } from './command-type';
import { FileObject, FileObjectT } from '../wsock/file-object.js';
import { MeshInfo, MeshInfoT } from '../wsock/mesh-info.js';
import { SceneOperations } from './scene-operations';


export class Message implements flatbuffers.IUnpackableObject<MessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Message {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

instanceId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

commandType():CommandType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CommandType.PING;
}

fileObject(obj?:FileObject):FileObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FileObject()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

binaryData(obj?:BinaryData):BinaryData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new BinaryData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

meshInfo(obj?:MeshInfo):MeshInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new MeshInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

targetGroup():string|null
targetGroup(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
targetGroup(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

clientType():string|null
clientType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
clientType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sceneOperation():SceneOperations {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SceneOperations.ADD;
}

targetId():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startMessage(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addInstanceId(builder:flatbuffers.Builder, instanceId:number) {
  builder.addFieldInt32(0, instanceId, 0);
}

static addCommandType(builder:flatbuffers.Builder, commandType:CommandType) {
  builder.addFieldInt8(1, commandType, CommandType.PING);
}

static addFileObject(builder:flatbuffers.Builder, fileObjectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fileObjectOffset, 0);
}

static addBinaryData(builder:flatbuffers.Builder, binaryDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, binaryDataOffset, 0);
}

static addMeshInfo(builder:flatbuffers.Builder, meshInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, meshInfoOffset, 0);
}

static addTargetGroup(builder:flatbuffers.Builder, targetGroupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, targetGroupOffset, 0);
}

static addClientType(builder:flatbuffers.Builder, clientTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, clientTypeOffset, 0);
}

static addSceneOperation(builder:flatbuffers.Builder, sceneOperation:SceneOperations) {
  builder.addFieldInt8(7, sceneOperation, SceneOperations.ADD);
}

static addTargetId(builder:flatbuffers.Builder, targetId:number) {
  builder.addFieldInt32(8, targetId, 0);
}

static endMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): MessageT {
  return new MessageT(
    this.instanceId(),
    this.commandType(),
    (this.fileObject() !== null ? this.fileObject()!.unpack() : null),
    (this.binaryData() !== null ? this.binaryData()!.unpack() : null),
    (this.meshInfo() !== null ? this.meshInfo()!.unpack() : null),
    this.targetGroup(),
    this.clientType(),
    this.sceneOperation(),
    this.targetId()
  );
}


unpackTo(_o: MessageT): void {
  _o.instanceId = this.instanceId();
  _o.commandType = this.commandType();
  _o.fileObject = (this.fileObject() !== null ? this.fileObject()!.unpack() : null);
  _o.binaryData = (this.binaryData() !== null ? this.binaryData()!.unpack() : null);
  _o.meshInfo = (this.meshInfo() !== null ? this.meshInfo()!.unpack() : null);
  _o.targetGroup = this.targetGroup();
  _o.clientType = this.clientType();
  _o.sceneOperation = this.sceneOperation();
  _o.targetId = this.targetId();
}
}

export class MessageT implements flatbuffers.IGeneratedObject {
constructor(
  public instanceId: number = 0,
  public commandType: CommandType = CommandType.PING,
  public fileObject: FileObjectT|null = null,
  public binaryData: BinaryDataT|null = null,
  public meshInfo: MeshInfoT|null = null,
  public targetGroup: string|Uint8Array|null = null,
  public clientType: string|Uint8Array|null = null,
  public sceneOperation: SceneOperations = SceneOperations.ADD,
  public targetId: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fileObject = (this.fileObject !== null ? this.fileObject!.pack(builder) : 0);
  const binaryData = (this.binaryData !== null ? this.binaryData!.pack(builder) : 0);
  const meshInfo = (this.meshInfo !== null ? this.meshInfo!.pack(builder) : 0);
  const targetGroup = (this.targetGroup !== null ? builder.createString(this.targetGroup!) : 0);
  const clientType = (this.clientType !== null ? builder.createString(this.clientType!) : 0);

  Message.startMessage(builder);
  Message.addInstanceId(builder, this.instanceId);
  Message.addCommandType(builder, this.commandType);
  Message.addFileObject(builder, fileObject);
  Message.addBinaryData(builder, binaryData);
  Message.addMeshInfo(builder, meshInfo);
  Message.addTargetGroup(builder, targetGroup);
  Message.addClientType(builder, clientType);
  Message.addSceneOperation(builder, this.sceneOperation);
  Message.addTargetId(builder, this.targetId);

  return Message.endMessage(builder);
}
}
