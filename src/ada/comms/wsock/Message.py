# automatically generated by the FlatBuffers compiler, do not modify

# namespace: wsock

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Message(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Message()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Message
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Message
    def InstanceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Message
    def CommandType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Message
    def FileObject(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from ada.comms.wsock.FileObject import FileObject
            obj = FileObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Message
    def BinaryData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from ada.comms.wsock.BinaryData import BinaryData
            obj = BinaryData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Message
    def MeshInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from ada.comms.wsock.MeshInfo import MeshInfo
            obj = MeshInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Message
    def TargetGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Message
    def ClientType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Message
    def SceneOperation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Message
    def TargetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MessageStart(builder):
    builder.StartObject(9)

def Start(builder):
    MessageStart(builder)

def MessageAddInstanceId(builder, instanceId):
    builder.PrependInt32Slot(0, instanceId, 0)

def AddInstanceId(builder, instanceId):
    MessageAddInstanceId(builder, instanceId)

def MessageAddCommandType(builder, commandType):
    builder.PrependInt8Slot(1, commandType, 0)

def AddCommandType(builder, commandType):
    MessageAddCommandType(builder, commandType)

def MessageAddFileObject(builder, fileObject):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fileObject), 0)

def AddFileObject(builder, fileObject):
    MessageAddFileObject(builder, fileObject)

def MessageAddBinaryData(builder, binaryData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(binaryData), 0)

def AddBinaryData(builder, binaryData):
    MessageAddBinaryData(builder, binaryData)

def MessageAddMeshInfo(builder, meshInfo):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(meshInfo), 0)

def AddMeshInfo(builder, meshInfo):
    MessageAddMeshInfo(builder, meshInfo)

def MessageAddTargetGroup(builder, targetGroup):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(targetGroup), 0)

def AddTargetGroup(builder, targetGroup):
    MessageAddTargetGroup(builder, targetGroup)

def MessageAddClientType(builder, clientType):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(clientType), 0)

def AddClientType(builder, clientType):
    MessageAddClientType(builder, clientType)

def MessageAddSceneOperation(builder, sceneOperation):
    builder.PrependInt8Slot(7, sceneOperation, 0)

def AddSceneOperation(builder, sceneOperation):
    MessageAddSceneOperation(builder, sceneOperation)

def MessageAddTargetId(builder, targetId):
    builder.PrependInt32Slot(8, targetId, 0)

def AddTargetId(builder, targetId):
    MessageAddTargetId(builder, targetId)

def MessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return MessageEnd(builder)
