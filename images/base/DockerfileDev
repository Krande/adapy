FROM condaforge/mambaforge:22.9.0-3 as base

ENV TOOLS /tools
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONBUFFERED=1

#region Code Aster
ARG catemp=/tmp/code_aster

# Set locale environment
ENV LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    LANGUAGE=C.UTF-8

USER root
RUN mkdir ${catemp}
WORKDIR ${catemp}

RUN apt-get update && \
    apt-get upgrade -y --with-new-pkgs -o Dpkg::Options::="--force-confold"

RUN apt-get install -y \
    locales sudo \
    gcc g++ gfortran \
    wget \
    python3 \
    python3-dev \
    python3-numpy \
    libxft2 \
    libxmu6 \
    libxss1 \
    patch \
    make cmake \
    grace \
    zlib1g-dev \
    tk bison flex \
    libglu1-mesa libxcursor-dev \
    libmpich-dev \
    libopenblas-dev \
    libsuperlu-dev \
    libboost-numpy-dev \
    libboost-python-dev && \
  apt-get clean && \
  echo "C.UTF-8 UTF-8" >/etc/locale.gen && \
  locale-gen && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set locale environment
ENV LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    LANGUAGE=C.UTF-8

# Variables
ENV ASTER_VER=14.6
ENV ASTER_FULL_SRC="https://code-aster.org/FICHIERS/aster-full-src-${ASTER_VER}.0-1.noarch.tar.gz"

# Download and install the latest stable version
RUN wget --no-check-certificate --quiet ${ASTER_FULL_SRC} -O aster_full.tar.gz && \
    mkdir aster_full && tar xf aster_full.tar.gz -C aster_full --strip-components 1

RUN ls

RUN cd aster_full && \
    python3 setup.py install --prefix=${TOOLS}/aster --noprompt

#endregion

RUN cd ${TOOLS} && ls

#region Setup Conda environment
FROM condaforge/mambaforge:22.9.0-3

COPY --from=base /tools/aster /tools/aster

ENV TOOLS /tools
ENV DEBIAN_FRONTEND=noninteractive

LABEL code_aster="${ASTER_VER}"
ENV ADA_code_aster_exe=${TOOLS}/aster/bin/as_run

COPY images/environment.yml .
RUN mamba env update -f environment.yml

# https://github.com/conda-forge/calculix-feedstock
# https://anaconda.org/conda-forge/calculix
LABEL calculix=${CCXVER}
RUN export ADA_ccx_exe=$(which ccx)
ENV ADA_ccx_exe=${ADA_ccx_exe}
#endregion

#region Install and Setup ADA and Jupyter Client

# Add Tini. Tini operates as a process subreaper for jupyter. This prevents kernel crashes.
ENV TINI_VERSION v0.19.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini
ENTRYPOINT ["/usr/bin/tini", "--"]

RUN conda clean -a

LABEL python="3.11"
## MAKE ALL BELOW RUN COMMANDS USE THE NEW CONDA ENVIRONMENT
SHELL ["conda", "run", "-n", "adadocker", "/bin/bash", "-c"]
#endregion

#region Binder Run Settings

ARG NB_UID=1000
ENV NB_UID ${NB_UID}
ARG NB_USER=adauser
ENV USER ${NB_USER}
ENV HOME /home/${NB_USER}

ENV ADA_temp_dir ${HOME}/temp
ENV ADA_test_dir ${HOME}/temp/tests
ENV ADA_log_dir ${HOME}/temp/log
ENV ADA_scratch_dir ${HOME}/scratch

RUN mkdir -p ${HOME} && mkdir ${ADA_temp_dir} && mkdir ${ADA_scratch_dir} && mkdir ${ADA_test_dir} && mkdir ${ADA_log_dir}

RUN useradd -b ${HOME} -m -s /bin/bash ${NB_USER} --uid ${NB_UID}
#RUN adduser --disabled-password --gecos "Default user" --uid ${NB_UID} ${NB_USER}

USER root
RUN apt-get update && apt-get install -y libgl1-mesa-glx
COPY setup.cfg .
COPY pyproject.toml .
COPY MANIFEST.in .
COPY LICENSE .
COPY README.md .
COPY src src
RUN pip install . --no-cache-dir

RUN rm -rfv /tmp/*
RUN chown -R ${NB_UID} ${HOME}
USER ${NB_USER}
SHELL ["conda", "run", "-n", "adadocker", "/bin/bash", "-c"]

WORKDIR ${HOME}
RUN conda list
ENV PYTHONBUFFERED=1
CMD ["conda", "run", "-n", "adadocker", "/bin/bash", "-c", "jupyter notebook --port=8888 --no-browser --ip=0.0.0.0 --allow-root --NotebookApp.token=''"]


COPY examples examples
#endregion
