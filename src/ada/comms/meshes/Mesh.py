# automatically generated by the FlatBuffers compiler, do not modify

# namespace: meshes

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Mesh(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Mesh()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMesh(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # Mesh
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Mesh
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mesh
    def Indices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4)
            )
        return 0

    # Mesh
    def IndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Mesh
    def IndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mesh
    def IndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Mesh
    def Vertices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4)
            )
        return 0

    # Mesh
    def VerticesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Mesh
    def VerticesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mesh
    def VerticesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Mesh
    def ParentName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None


def MeshStart(builder):
    builder.StartObject(4)


def Start(builder):
    MeshStart(builder)


def MeshAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)


def AddName(builder, name):
    MeshAddName(builder, name)


def MeshAddIndices(builder, indices):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0)


def AddIndices(builder, indices):
    MeshAddIndices(builder, indices)


def MeshStartIndicesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartIndicesVector(builder, numElems):
    return MeshStartIndicesVector(builder, numElems)


def MeshAddVertices(builder, vertices):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vertices), 0)


def AddVertices(builder, vertices):
    MeshAddVertices(builder, vertices)


def MeshStartVerticesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartVerticesVector(builder, numElems):
    return MeshStartVerticesVector(builder, numElems)


def MeshAddParentName(builder, parentName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(parentName), 0)


def AddParentName(builder, parentName):
    MeshAddParentName(builder, parentName)


def MeshEnd(builder):
    return builder.EndObject()


def End(builder):
    return MeshEnd(builder)
