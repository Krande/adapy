# automatically generated by the FlatBuffers compiler, do not modify

# namespace: meshes

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class AppendMesh(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AppendMesh()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAppendMesh(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # AppendMesh
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AppendMesh
    def Mesh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from ada.comms.meshes.Mesh import Mesh

            obj = Mesh()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None


def AppendMeshStart(builder):
    builder.StartObject(1)


def Start(builder):
    AppendMeshStart(builder)


def AppendMeshAddMesh(builder, mesh):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mesh), 0)


def AddMesh(builder, mesh):
    AppendMeshAddMesh(builder, mesh)


def AppendMeshEnd(builder):
    return builder.EndObject()


def End(builder):
    return AppendMeshEnd(builder)
