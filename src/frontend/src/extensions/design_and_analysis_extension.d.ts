/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * GLTF extension for mapping design and analysis objects with per-object simulation data
 */
export interface ADADesignAndAnalysisExtension {
  /**
   * Array containing either Design Data Extension objects or Simulation Data Extension Metadata objects
   */
  node_mapping: (DesignDataExtension | SimulationDataExtensionMetadata)[];
  /**
   * Version of the ADA extension schema
   */
  version?: string;
}
/**
 * GLTF extension for design object metadata and grouping
 */
export interface DesignDataExtension {
  /**
   * Name of the design object
   */
  name: string;
  /**
   * Optional description of the design object
   */
  description?: string;
  /**
   * Material specification for the design object
   */
  material?: string;
  /**
   * Custom properties for the design object
   */
  properties?: {
    [k: string]: unknown;
  };
  /**
   * Named groups and their member objects
   */
  groups?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^.+$".
     */
    [k: string]: {
      /**
       * Display name of the group
       */
      name: string;
      /**
       * Array of member identifiers (could be node indices, names, or other identifiers)
       */
      members: (string | number)[];
      /**
       * Optional description of the group
       */
      description?: string;
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
}
export interface SimulationDataExtensionMetadata {
  /**
   * Name of the simulation.
   */
  name: string;
  /**
   * Date and time of the simulation.
   */
  date: string;
  /**
   * Name of the FEA software used.
   */
  fea_software: string;
  /**
   * Version of the FEA software.
   */
  fea_software_version: string;
  /**
   * List of analysis steps.
   */
  steps: StepObject[];
  node_references?: NodeReference;
  [k: string]: unknown;
}
export interface StepObject {
  /**
   * Type of analysis for this step.
   */
  analysis_type: "eigenvalue" | "implicit static" | "implicit dynamic" | "explicit";
  /**
   * List of field data objects for this step.
   */
  fields: FieldObject[];
  [k: string]: unknown;
}
export interface FieldObject {
  /**
   * Name of the result field, e.g., displacement, stress.
   */
  name: string;
  /**
   * Type of the field data, e.g., 'vector', 'scalar'.
   */
  type: string;
  data: DataReference;
  [k: string]: unknown;
}
export interface DataReference {
  /**
   * Index of the glTF bufferView containing the binary data.
   */
  bufferView: number;
  /**
   * Offset into the bufferView in bytes.
   */
  byteOffset?: number;
  [k: string]: unknown;
}
export interface NodeReference {
  /**
   * node reference of Point mesh
   */
  points?: string;
  /**
   * node reference of Edges mesh
   */
  edges?: string;
  /**
   * node reference of Faces mesh
   */
  faces?: string;
  /**
   * node reference of Solid Beams mesh
   */
  solid_beams?: string;
  [k: string]: unknown;
}
