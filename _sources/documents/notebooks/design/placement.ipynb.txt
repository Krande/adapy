{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3193862edc43da14",
   "metadata": {},
   "source": [
    "# Placement of parts and objects\n",
    "\n",
    "Placement of every object in adapy can be controlled using the `ada.Placement` object."
   ]
  },
  {
   "cell_type": "code",
   "id": "2910341458c85e3c",
   "metadata": {},
   "source": [
    "import ada"
   ],
   "outputs": [],
   "execution_count": null
  },
  {
   "cell_type": "markdown",
   "id": "bde8ad3f-b832-4663-97fe-82f42f19fa98",
   "metadata": {},
   "source": [
    "First let's check out how we can copy a single beam and apply a translation and rotation to each instance of the copy"
   ]
  },
  {
   "cell_type": "code",
   "id": "750efee21a7fc662",
   "metadata": {},
   "source": [
    "bm = ada.Beam('bm1', (0,0,0), (1,0,0), 'IPE300')\n",
    "other_beams = []\n",
    "for i, angle in enumerate([45, 90, 135, 180], start=2):\n",
    "    other_beams.append(bm.copy_to(f\"bm{i}\", (0,0,i-1), rotation_axis=(0,0,1), rotation_angle=angle))\n",
    "p = ada.Part('MyPart') / (bm, *other_beams)\n",
    "p.show()"
   ],
   "outputs": [],
   "execution_count": null
  },
  {
   "cell_type": "markdown",
   "id": "ee42e4aca040e1bf",
   "metadata": {},
   "source": [
    "Copy and applying translations/rotations can also be given on a part level."
   ]
  },
  {
   "cell_type": "code",
   "id": "a168e4b2b24ad4d4",
   "metadata": {},
   "source": [
    "w = 5\n",
    "pl = ada.Plate('pl1', [(0,0), (w,0), (w,w), (0,w)], 0.01)\n",
    "beams = ada.Beam.array_from_list_of_coords(pl.poly.points3d,'IPE300', make_closed=True)\n",
    "p = ada.Part('myPart') / (pl, *beams)\n",
    "\n",
    "p_top = ada.Part('TopPart') / (p, p.copy_to('my_copied_part', (0,0,1), (0,0,1), 45))\n",
    "p_top.show()"
   ],
   "outputs": [],
   "execution_count": null
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
