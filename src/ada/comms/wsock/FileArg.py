# automatically generated by the FlatBuffers compiler, do not modify

# namespace: wsock

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class FileArg(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FileArg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFileArg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # FileArg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FileArg
    def ArgName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FileArg
    def FileType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0


def FileArgStart(builder):
    builder.StartObject(2)


def Start(builder):
    FileArgStart(builder)


def FileArgAddArgName(builder, argName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(argName), 0)


def AddArgName(builder, argName):
    FileArgAddArgName(builder, argName)


def FileArgAddFileType(builder, fileType):
    builder.PrependInt8Slot(1, fileType, 0)


def AddFileType(builder, fileType):
    FileArgAddFileType(builder, fileType)


def FileArgEnd(builder):
    return builder.EndObject()


def End(builder):
    return FileArgEnd(builder)
