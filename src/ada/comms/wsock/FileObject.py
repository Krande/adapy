# automatically generated by the FlatBuffers compiler, do not modify

# namespace: wsock

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FileObject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FileObject()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFileObject(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FileObject
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FileObject
    def FileType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FileObject
    def Purpose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FileObject
    def Filepath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FileObjectStart(builder):
    builder.StartObject(3)

def Start(builder):
    FileObjectStart(builder)

def FileObjectAddFileType(builder, fileType):
    builder.PrependInt8Slot(0, fileType, 0)

def AddFileType(builder, fileType):
    FileObjectAddFileType(builder, fileType)

def FileObjectAddPurpose(builder, purpose):
    builder.PrependInt8Slot(1, purpose, 0)

def AddPurpose(builder, purpose):
    FileObjectAddPurpose(builder, purpose)

def FileObjectAddFilepath(builder, filepath):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(filepath), 0)

def AddFilepath(builder, filepath):
    FileObjectAddFilepath(builder, filepath)

def FileObjectEnd(builder):
    return builder.EndObject()

def End(builder):
    return FileObjectEnd(builder)
