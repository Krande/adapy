// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SceneOperations } from './scene-operations';


export class SceneOperation implements flatbuffers.IUnpackableObject<SceneOperationT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SceneOperation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSceneOperation(bb:flatbuffers.ByteBuffer, obj?:SceneOperation):SceneOperation {
  return (obj || new SceneOperation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSceneOperation(bb:flatbuffers.ByteBuffer, obj?:SceneOperation):SceneOperation {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SceneOperation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

operation():SceneOperations {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SceneOperations.ADD;
}

cameraPosition(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

cameraPositionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

cameraPositionArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

lookAtPosition(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

lookAtPositionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

lookAtPositionArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startSceneOperation(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addOperation(builder:flatbuffers.Builder, operation:SceneOperations) {
  builder.addFieldInt8(0, operation, SceneOperations.ADD);
}

static addCameraPosition(builder:flatbuffers.Builder, cameraPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, cameraPositionOffset, 0);
}

static createCameraPositionVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createCameraPositionVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createCameraPositionVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startCameraPositionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLookAtPosition(builder:flatbuffers.Builder, lookAtPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, lookAtPositionOffset, 0);
}

static createLookAtPositionVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createLookAtPositionVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createLookAtPositionVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startLookAtPositionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSceneOperation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSceneOperation(builder:flatbuffers.Builder, operation:SceneOperations, cameraPositionOffset:flatbuffers.Offset, lookAtPositionOffset:flatbuffers.Offset):flatbuffers.Offset {
  SceneOperation.startSceneOperation(builder);
  SceneOperation.addOperation(builder, operation);
  SceneOperation.addCameraPosition(builder, cameraPositionOffset);
  SceneOperation.addLookAtPosition(builder, lookAtPositionOffset);
  return SceneOperation.endSceneOperation(builder);
}

unpack(): SceneOperationT {
  return new SceneOperationT(
    this.operation(),
    this.bb!.createScalarList<number>(this.cameraPosition.bind(this), this.cameraPositionLength()),
    this.bb!.createScalarList<number>(this.lookAtPosition.bind(this), this.lookAtPositionLength())
  );
}


unpackTo(_o: SceneOperationT): void {
  _o.operation = this.operation();
  _o.cameraPosition = this.bb!.createScalarList<number>(this.cameraPosition.bind(this), this.cameraPositionLength());
  _o.lookAtPosition = this.bb!.createScalarList<number>(this.lookAtPosition.bind(this), this.lookAtPositionLength());
}
}

export class SceneOperationT implements flatbuffers.IGeneratedObject {
constructor(
  public operation: SceneOperations = SceneOperations.ADD,
  public cameraPosition: (number)[] = [],
  public lookAtPosition: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cameraPosition = SceneOperation.createCameraPositionVector(builder, this.cameraPosition);
  const lookAtPosition = SceneOperation.createLookAtPositionVector(builder, this.lookAtPosition);

  return SceneOperation.createSceneOperation(builder,
    this.operation,
    cameraPosition,
    lookAtPosition
  );
}
}
